{"ast":null,"code":"var _jsxFileName = \"/home/magrelim12/\\xC1rea de Trabalho/FullStack/Front-End/Rocketseat/Ignite/02-ignite-template-reactjs-criando-um-hook-de-carrinho-de-compras/src/hooks/useCart.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useRef, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext({});\nexport function CartProvider({\n  children\n}) {\n  _s();\n\n  var _prevCartRef$current;\n\n  const [cart, setCart] = useState(() => {\n    const storagedCart = localStorage.getItem('@RocketShoes:cart');\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  });\n  const prevCartRef = useRef();\n  useEffect(() => {\n    prevCartRef.current = cart;\n  });\n  const cartPreviousValue = (_prevCartRef$current = prevCartRef.current) !== null && _prevCartRef$current !== void 0 ? _prevCartRef$current : cart;\n  useEffect(() => {\n    if (cartPreviousValue !== cart) {\n      localStorage.setItem('@RocketShoes:cart', JSON.stringify(cart));\n    }\n  }, [cart, cartPreviousValue]);\n\n  const addProduct = async productId => {\n    try {\n      const updatedCart = [...cart];\n      const productExists = updatedCart.find(product => product.id === productId);\n      const stock = await api.get(`/stock/${productId}`);\n      const stockAmount = stock.data.amount;\n      const currentAmount = productExists ? productExists.amount : 0;\n      const amount = currentAmount + 1;\n\n      if (amount > stockAmount) {\n        toast.error('Quantidade solicitada fora de estoque');\n        return;\n      }\n\n      if (productExists) {\n        productExists.amount = amount;\n      } else {\n        const product = await api.get(`/products/${productId}`);\n        const newProduct = { ...product.data,\n          amount: 1\n        };\n        updatedCart.push(newProduct);\n      }\n\n      setCart(updatedCart);\n    } catch {\n      toast.error('Erro na adição do produto');\n    }\n  };\n\n  const removeProduct = productId => {\n    try {\n      const updatedCart = [...cart];\n      const productIndex = updatedCart.findIndex(product => product.id === productId);\n\n      if (productIndex >= 0) {\n        updatedCart.splice(productIndex, 1);\n        setCart(updatedCart);\n      } else {\n        throw Error();\n      }\n    } catch {\n      toast.error(\"Erro na remoção do produto\");\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount\n  }) => {\n    try {\n      if (amount <= 0) {\n        return;\n      }\n\n      const stock = await api.get(`/stock/${productId}`);\n      const stockAmount = stock.data.amount;\n\n      if (amount > stockAmount) {\n        toast.error('Quantidade solicitada fora de estoque');\n        return;\n      }\n\n      const updatedCart = [...cart];\n      const productExists = updatedCart.find(product => product.id === productId);\n\n      if (productExists) {\n        productExists.amount = amount;\n        setCart(updatedCart);\n      } else {\n        throw Error();\n      }\n    } catch {\n      toast.error('Erro na alteração de quantidade do produto');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addProduct,\n      removeProduct,\n      updateProductAmount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CartProvider, \"kUWYgsnPHgrCJOLp2tVx7rML5dk=\");\n\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n\n  const context = useContext(CartContext);\n  return context;\n}\n\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/home/magrelim12/Área de Trabalho/FullStack/Front-End/Rocketseat/Ignite/02-ignite-template-reactjs-criando-um-hook-de-carrinho-de-compras/src/hooks/useCart.tsx"],"names":["createContext","useContext","useEffect","useRef","useState","toast","api","CartContext","CartProvider","children","cart","setCart","storagedCart","localStorage","getItem","JSON","parse","prevCartRef","current","cartPreviousValue","setItem","stringify","addProduct","productId","updatedCart","productExists","find","product","id","stock","get","stockAmount","data","amount","currentAmount","error","newProduct","push","removeProduct","productIndex","findIndex","splice","Error","updateProductAmount","useCart","context"],"mappings":"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","sourcesContent":["import { createContext, ReactNode, useContext, useEffect, useRef, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { Product, Stock } from '../types';\n\ninterface CartProviderProps {\n  children: ReactNode;\n}\n\ninterface UpdateProductAmount {\n  productId: number;\n  amount: number;\n}\n\ninterface CartContextData {\n  cart: Product[];\n  addProduct: (productId: number) => Promise<void>;\n  removeProduct: (productId: number) => void;\n  updateProductAmount: ({ productId, amount }: UpdateProductAmount) => void;\n}\n\nconst CartContext = createContext<CartContextData>({} as CartContextData);\n\nexport function CartProvider({ children }: CartProviderProps): JSX.Element {\n  const [cart, setCart] = useState<Product[]>(() => {\n    const storagedCart = localStorage.getItem('@RocketShoes:cart');\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  });\n\n  const prevCartRef = useRef<Product[]>();\n\n  useEffect(() => {\n    prevCartRef.current = cart;\n  })\n\n  const cartPreviousValue = prevCartRef.current ?? cart;\n\n  useEffect(() => {\n    if (cartPreviousValue !== cart) {\n      localStorage.setItem('@RocketShoes:cart', JSON.stringify(cart));\n    }\n  }, [cart, cartPreviousValue]);\n\n  const addProduct = async (productId: number) => {\n    try {\n      const updatedCart = [...cart];\n      const productExists = updatedCart.find(product => product.id === productId);\n\n      const stock = await api.get(`/stock/${productId}`);\n\n      const stockAmount = stock.data.amount;\n      const currentAmount = productExists ? productExists.amount : 0;\n      const amount = currentAmount + 1;\n\n      if (amount > stockAmount) {\n        toast.error('Quantidade solicitada fora de estoque');\n        return;\n      }\n\n      if (productExists) {\n        productExists.amount = amount;\n      } else {\n        const product = await api.get(`/products/${productId}`);\n\n        const newProduct = {\n          ...product.data,\n          amount: 1\n        }\n        updatedCart.push(newProduct);\n      }\n\n      setCart(updatedCart);\n    } catch {\n      toast.error('Erro na adição do produto');\n    }\n  };\n\n  const removeProduct = (productId: number) => {\n    try {\n      const updatedCart = [...cart];\n      const productIndex = updatedCart.findIndex(product => product.id === productId);\n\n      if (productIndex >= 0) {\n        updatedCart.splice(productIndex, 1);\n        setCart(updatedCart);\n      } else {\n        throw Error();\n      }\n    } catch {\n      toast.error(\"Erro na remoção do produto\");\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount,\n  }: UpdateProductAmount) => {\n    try {\n      if (amount <= 0) {\n        return;\n      }\n\n      const stock = await api.get(`/stock/${productId}`);\n\n      const stockAmount = stock.data.amount;\n\n      if (amount > stockAmount) {\n        toast.error('Quantidade solicitada fora de estoque');\n        return;\n      }\n\n      const updatedCart = [...cart];\n      const productExists = updatedCart.find(product => product.id === productId);\n\n      if (productExists) {\n        productExists.amount = amount;\n        setCart(updatedCart);\n      } else {\n        throw Error();\n      }\n    } catch {\n      toast.error('Erro na alteração de quantidade do produto');\n    }\n  };\n\n  return (\n    <CartContext.Provider\n      value={{ cart, addProduct, removeProduct, updateProductAmount }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart(): CartContextData {\n  const context = useContext(CartContext);\n\n  return context;\n}"]},"metadata":{},"sourceType":"module"}